(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{130:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return d}));var l=n(0),a=n.n(l);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},o=Object.keys(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),b=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=b(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=b(n),u=l,d=s["".concat(i,".").concat(u)]||s[u]||m[u]||o;return n?a.a.createElement(d,r(r({ref:t},c),{},{components:n})):a.a.createElement(d,r({ref:t},c))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,i=new Array(o);i[0]=u;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:l,i[1]=r;for(var c=2;c<o;c++)i[c]=n[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},74:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return r})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return b}));var l=n(2),a=n(7),o=(n(0),n(130)),i={title:"Migration Guide",description:"Updating your app to Angular Apollo 2.0 and Apollo Client 3.0"},r={unversionedId:"migration",id:"migration",isDocsHomePage:!1,title:"Migration Guide",description:"Updating your app to Angular Apollo 2.0 and Apollo Client 3.0",source:"@site/docs/migration.md",permalink:"/docs/migration",editUrl:"https://github.com/kamilkisiela/apollo-angular/edit/master/website/docs/migration.md",version:"next",sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/"},next:{title:"Get started",permalink:"/docs/get-started"}},p=[{value:"Installation",id:"installation",children:[]},{value:"Basic updates",id:"basic-updates",children:[{value:"No SelectPipe",id:"no-selectpipe",children:[]},{value:"No NgModules",id:"no-ngmodules",children:[]},{value:"HttpLink and HttpBatchLink",id:"httplink-and-httpbatchlink",children:[]},{value:"Apollo Links",id:"apollo-links",children:[]},{value:"graphql-tag",id:"graphql-tag",children:[]},{value:"Using apollo-utilities without the rest of Apollo Client",id:"using-apollo-utilities-without-the-rest-of-apollo-client",children:[]},{value:"Using apollo-cache and/or apollo-cache-inmemory without the rest of Apollo Client",id:"using-apollo-cache-andor-apollo-cache-inmemory-without-the-rest-of-apollo-client",children:[]},{value:"Breaking cache changes",id:"breaking-cache-changes",children:[]}]}],c={rightToc:p};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(l.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Apollo Client is now distributed as the ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client")," package (previous versions are distributed as ",Object(o.b)("inlineCode",{parentName:"li"},"apollo-client"),")."),Object(o.b)("li",{parentName:"ul"},"The ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client")," package includes both core logic and GraphQL request handling, which previously required installing separate packages."),Object(o.b)("li",{parentName:"ul"},"The ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client")," includes React-specific code so it's very important to use ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client/core")," instead."),Object(o.b)("li",{parentName:"ul"},"The ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client")," includes React-specific code so it's very very important to use ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client/core")," instead."),Object(o.b)("li",{parentName:"ul"},"The ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client")," includes React-specific code so it's very very very important to use ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client/core")," instead."),Object(o.b)("li",{parentName:"ul"},"Apollo's cache (",Object(o.b)("inlineCode",{parentName:"li"},"InMemoryCache"),") is more flexible and performant. It now supports garbage collection, storage of both normalized and non-normalized data, and the customization of cached data with new ",Object(o.b)("inlineCode",{parentName:"li"},"TypePolicy")," and ",Object(o.b)("inlineCode",{parentName:"li"},"FieldPolicy")," APIs."),Object(o.b)("li",{parentName:"ul"},"No more ",Object(o.b)("inlineCode",{parentName:"li"},"NgModules"),"."),Object(o.b)("li",{parentName:"ul"},"The ",Object(o.b)("inlineCode",{parentName:"li"},"apollo-angular")," includes now GraphQL request handling (",Object(o.b)("inlineCode",{parentName:"li"},"apollo-angular/http"),"), which previously required installing separate packages."),Object(o.b)("li",{parentName:"ul"},"New Apollo Angular no longer supports the ",Object(o.b)("inlineCode",{parentName:"li"},"SelectPipe"),".")),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("p",null,"To get started with the v2.0, you will change your imports to use the two packages. A typical upgrade looks like this:"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Before")),Object(o.b)("pre",null,Object(o.b)("code",Object(l.a)({parentName:"pre"},{className:"language-typescript"}),"import {ApolloClient} from 'apollo-client';\nimport {ApolloModule} from 'apollo-angular';\nimport {HttpLink} from 'apollo-angular-link-http';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport gql from 'graphql-tag';\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"After")),Object(o.b)("pre",null,Object(o.b)("code",Object(l.a)({parentName:"pre"},{className:"language-typescript"}),"import {ApolloClient, InMemoryCache} from '@apollo/client/core';\nimport {ApolloModule, gql} from 'apollo-angular';\nimport {HttpLink} from 'apollo-angular/http';\n")),Object(o.b)("h2",{id:"basic-updates"},"Basic updates"),Object(o.b)("p",null,"A simple usage of Apollo Angular upgrading to the 2.0 would look like this:"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Before (with ",Object(o.b)("inlineCode",{parentName:"strong"},"create")," methods)")),Object(o.b)("pre",null,Object(o.b)("code",Object(l.a)({parentName:"pre"},{className:"language-typescript"}),"import {NgModule} from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport {ApolloModule, Apollo} from 'apollo-angular';\nimport {HttpLinkModule, HttpLink} from 'apollo-angular-link-http';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\n\n@NgModule({\n  imports: [\n    // ... other modules\n    HttpClientModule,\n    HttpLinkModule,\n    ApolloModule,\n  ],\n})\nclass AppModule {\n  constructor(apollo: Apollo, httpLink: HttpLink) {\n    apollo.create({\n      link: httpLink.create({uri: 'http://localhost:3000'}),\n      cache: new InMemoryCache(),\n    });\n  }\n}\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Before (with Dependency Injection)")),Object(o.b)("pre",null,Object(o.b)("code",Object(l.a)({parentName:"pre"},{className:"language-typescript"}),"import {NgModule} from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport {ApolloModule, APOLLO_OPTIONS} from 'apollo-angular';\nimport {HttpLinkModule, HttpLink} from 'apollo-angular-link-http';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\n\n@NgModule({\n  imports: [\n    // ... other modules\n    HttpClientModule,\n    HttpLinkModule,\n    ApolloModule,\n  ],\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: (httpLink: HttpLink) => {\n        return {\n          cache: new InMemoryCache(),\n          link: httpLink.create({\n            uri: 'http://localhost:3000',\n          }),\n        };\n      },\n      deps: [HttpLink],\n    },\n  ],\n})\nclass AppModule {}\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"After")),Object(o.b)("pre",null,Object(o.b)("code",Object(l.a)({parentName:"pre"},{className:"language-typescript"}),"import {NgModule} from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport {APOLLO_OPTIONS} from 'apollo-angular';\nimport {HttpLink} from 'apollo-angular/http';\nimport {InMemoryCache} from '@apollo/client/core';\n\n@NgModule({\n  imports: [\n    // ... other modules\n    HttpClientModule,\n  ],\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: (httpLink: HttpLink) => {\n        return {\n          cache: new InMemoryCache(),\n          link: httpLink.create({\n            uri: 'http://localhost:3000',\n          }),\n        };\n      },\n      deps: [HttpLink],\n    },\n  ],\n})\nclass AppModule {}\n")),Object(o.b)("p",null,"What's different?"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"apollo-angular-link-http")," and ",Object(o.b)("inlineCode",{parentName:"li"},"apollo-angular-link-http-batch")," are now available under ",Object(o.b)("inlineCode",{parentName:"li"},"apollo-angular/http")),Object(o.b)("li",{parentName:"ul"},"No ",Object(o.b)("inlineCode",{parentName:"li"},"ApolloModule")," and ",Object(o.b)("inlineCode",{parentName:"li"},"HttpLinkModule")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"apollo-client"),", ",Object(o.b)("inlineCode",{parentName:"li"},"apollo-link")," and ",Object(o.b)("inlineCode",{parentName:"li"},"apollo-cache-inmemory")," are now under ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client/core")),Object(o.b)("li",{parentName:"ul"},"Use ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client/core")," instead of ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client")," because the latter includes React-related code.")),Object(o.b)("p",null,"This is the ",Object(o.b)("strong",{parentName:"p"},"most important part")," of migrating to 2.0."),Object(o.b)("p",null,"Few things to be explained."),Object(o.b)("h3",{id:"no-selectpipe"},"No SelectPipe"),Object(o.b)("p",null,"Dropping ",Object(o.b)("inlineCode",{parentName:"p"},"SelectPipe")," allowed us to completely remove the need for ",Object(o.b)("inlineCode",{parentName:"p"},"ApolloModule")," (",Object(o.b)("inlineCode",{parentName:"p"},"NgModule"),"). There are two reasons. We haven't seen any big applications using the pipe and the logic there is very simple to recreate."),Object(o.b)("pre",null,Object(o.b)("code",Object(l.a)({parentName:"pre"},{className:"language-typescript"}),"import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'select',\n})\nexport class SelectPipe implements PipeTransform {\n  public transform(obj: any, name: string = '') {\n    if (name !== '') {\n      return obj?.data?.[name];\n    }\n  }\n}\n")),Object(o.b)("h3",{id:"no-ngmodules"},"No NgModules"),Object(o.b)("p",null,"Because we removed the ",Object(o.b)("inlineCode",{parentName:"p"},"SelectPipe"),", there was no need to keep the ",Object(o.b)("inlineCode",{parentName:"p"},"ApolloModule")," anymore."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Apollo")," class is now defined as a tree-shakable injectable and provided to the root injector. You can use it from anywhere in the application."),Object(o.b)("h3",{id:"httplink-and-httpbatchlink"},"HttpLink and HttpBatchLink"),Object(o.b)("p",null,"The previous version of Apollo Angular (v1.0) setup had two extra packages: ",Object(o.b)("inlineCode",{parentName:"p"},"apollo-angular-link-http")," and ",Object(o.b)("inlineCode",{parentName:"p"},"apollo-angular-link-http-batch"),"."),Object(o.b)("p",null,"Now it's just one: ",Object(o.b)("inlineCode",{parentName:"p"},"apollo-angular/http"),"."),Object(o.b)("h3",{id:"apollo-links"},"Apollo Links"),Object(o.b)("p",null,"The separate ",Object(o.b)("inlineCode",{parentName:"p"},"apollo-link-*")," packages, that were previously maintained in the ",Object(o.b)("a",Object(l.a)({parentName:"p"},{href:"https://github.com/apollographql/apollo-link"}),"https://github.com/apollographql/apollo-link")," repo, have been merged into the Apollo Client project. These links now have their own nested ",Object(o.b)("inlineCode",{parentName:"p"},"@apollo/client/link/*")," entry points. Imports should be updated as follows:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"apollo-link-context")," is now ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client/link/context")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"apollo-link-error")," is now ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client/link/error")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"apollo-link-retry")," is now ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client/link/retry")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"apollo-link-schema")," is now ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client/link/schema")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"apollo-link-ws")," is now ",Object(o.b)("inlineCode",{parentName:"li"},"@apollo/client/link/ws"))),Object(o.b)("h3",{id:"graphql-tag"},"graphql-tag"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"apollo-angular")," package includes ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-tag")," as a dependency and re-exports ",Object(o.b)("inlineCode",{parentName:"p"},"gql"),". To simplify your dependencies, we recommend importing ",Object(o.b)("inlineCode",{parentName:"p"},"gql")," from ",Object(o.b)("inlineCode",{parentName:"p"},"apollo-angular")," and removing all ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-tag")," dependencies."),Object(o.b)("h3",{id:"using-apollo-utilities-without-the-rest-of-apollo-client"},"Using apollo-utilities without the rest of Apollo Client"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"apollo-utilities")," package has been removed, but you can access the utilities themselves from the ",Object(o.b)("inlineCode",{parentName:"p"},"@apollo/client/utilities")," entry point:"),Object(o.b)("pre",null,Object(o.b)("code",Object(l.a)({parentName:"pre"},{className:"language-typescript"}),"import {isReference, isInlineFragment} from '@apollo/client/utilities';\n")),Object(o.b)("h3",{id:"using-apollo-cache-andor-apollo-cache-inmemory-without-the-rest-of-apollo-client"},"Using apollo-cache and/or apollo-cache-inmemory without the rest of Apollo Client"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"apollo-cache")," and ",Object(o.b)("inlineCode",{parentName:"p"},"apollo-cache-inmemory")," packages have been removed, but if you're interested in using Apollo Client's cache by itself, you can access their contents with the ",Object(o.b)("inlineCode",{parentName:"p"},"@apollo/client/cache")," entry point:"),Object(o.b)("pre",null,Object(o.b)("code",Object(l.a)({parentName:"pre"},{className:"language-typescript"}),"import {ApolloCache, InMemoryCache} from '@apollo/client/cache';\n")),Object(o.b)("h3",{id:"breaking-cache-changes"},"Breaking cache changes"),Object(o.b)("p",null,"The following cache changes are not backward compatible. Take them into consideration before you upgrade to Apollo Client 3.0."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"By default, the ",Object(o.b)("inlineCode",{parentName:"li"},"InMemoryCache")," no longer merges the fields of two objects unless those objects have the same unique identifier and that identifier is present in both objects. Additionally, the values of fields with the same name are no longer merged recursively by default. You can define a custom ",Object(o.b)("inlineCode",{parentName:"li"},"merge")," function for a field to handle both of these changes for a particular field. You can read more about these changes in ",Object(o.b)("a",Object(l.a)({parentName:"li"},{href:"/docs/caching/field-behavior#merging-non-normalized-objects"}),"Merging non-normalized objects"),". (",Object(o.b)("a",Object(l.a)({parentName:"li"},{href:"https://github.com/apollographql/apollo-client/pull/5603"}),"PR #5603"),")."),Object(o.b)("li",{parentName:"ul"},"All cache results are now frozen/immutable, as promised in the ",Object(o.b)("a",Object(l.a)({parentName:"li"},{href:"https://blog.apollographql.com/whats-new-in-apollo-client-2-6-b3acf28ecad1"}),"Apollo Client 2.6 blog post")," (",Object(o.b)("a",Object(l.a)({parentName:"li"},{href:"https://github.com/apollographql/apollo-client/pull/5153"}),"PR #5153"),")."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"FragmentMatcher"),", ",Object(o.b)("inlineCode",{parentName:"li"},"HeuristicFragmentMatcher"),", and ",Object(o.b)("inlineCode",{parentName:"li"},"IntrospectionFragmentMatcher")," have all been removed. We recommend using the ",Object(o.b)("inlineCode",{parentName:"li"},"InMemoryCache"),"'s ",Object(o.b)("inlineCode",{parentName:"li"},"possibleTypes")," option instead. For more information, see ",Object(o.b)("a",Object(l.a)({parentName:"li"},{href:"/docs/data/fragments#defining-possibletypes-manually"}),"Defining possibleTypes manually")," (",Object(o.b)("a",Object(l.a)({parentName:"li"},{href:"https://github.com/apollographql/apollo-client/pull/5073"}),"PR #5073"),")."),Object(o.b)("li",{parentName:"ul"},"The internal representation of normalized data in the cache has changed. If you\u2019re using ",Object(o.b)("inlineCode",{parentName:"li"},"apollo-cache-inmemory"),"'s public API, then these changes shouldn't impact you. If you are manipulating cached data directly instead, review ",Object(o.b)("a",Object(l.a)({parentName:"li"},{href:"https://github.com/apollographql/apollo-client/pull/5146"}),"PR #5146")," for details."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"(client/cache).writeData")," have been fully removed. ",Object(o.b)("inlineCode",{parentName:"li"},"(client/cache).writeQuery"),", ",Object(o.b)("inlineCode",{parentName:"li"},"(client/cache).writeFragment"),", and/or ",Object(o.b)("inlineCode",{parentName:"li"},"cache.modify")," can be used to update the cache. For example:")),Object(o.b)("pre",null,Object(o.b)("code",Object(l.a)({parentName:"pre"},{className:"language-typescript"}),"client.writeData({\n  data: {\n    cartItems: [],\n  },\n});\n")),Object(o.b)("p",null,"can be converted to:"),Object(o.b)("pre",null,Object(o.b)("code",Object(l.a)({parentName:"pre"},{className:"language-typescript"}),"client.writeQuery({\n  query: gql`\n    query GetCartItems {\n      cartItems\n    }\n  `,\n  data: {\n    cartItems: [],\n  },\n});\n")),Object(o.b)("p",null,"For more details around why writeData has been removed, see ",Object(o.b)("a",Object(l.a)({parentName:"p"},{href:"https://github.com/apollographql/apollo-client/pull/5923"}),"PR #5923"),"."))}b.isMDXComponent=!0}}]);